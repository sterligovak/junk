def suiteName = args[0]def filename = CamelToFilename( args[0] )def projectName = "streaming_system"def testCpp = filename + "_tests.cpp"def cmakeFile = "CMakeLists.txt"CreateTestFile( testCpp, suiteName, projectName, "" )RegisterInTestCMake( cmakeFile, projectName + "_tests", testCpp )def CamelToFilename( className ){	def filename = className	filename = filename[0].toLowerCase() + filename.substring( 1, filename.length() )	return filename.replaceAll( /\p{Upper}/, {		"_" + it[0].toLowerCase()	} )}def CreateTestFile( testCpp, suiteName, projectName, includeHeader ){	new File( testCpp ).withWriter( { w->		w.writeLine( "#include <boost/test/unit_test.hpp>" )				if( includeHeader != "" ) {			w.newLine()			w.writeLine( "#include \"../${includeHeader}\"")		}				w.newLine()		w.writeLine( "using namespace mia;" )		w.writeLine( "using namespace ${projectName};" )		w.newLine()		w.writeLine( "BOOST_AUTO_TEST_SUITE( ${suiteName}TestSuite )" )		w.newLine()		w.writeLine( "BOOST_AUTO_TEST_CASE( Test )" )		w.writeLine( "{" )		w.writeLine( "}" )		w.newLine()		w.writeLine( "BOOST_AUTO_TEST_SUITE_END()" )	} )	println( "${testCpp} created" )}def RegisterInTestCMake( cmakeFile, projectName, testCpp ){	cmakeTestFile = new File( cmakeFile )	cmakeTestText = cmakeTestFile.getText().replaceAll( /add_boost_test_suite\(\s*${projectName}\s+(\p{Digit}+)/,{														"add_boost_test_suite( $projectName ${it[1]}\n    ${testCpp}" 						} )	cmakeTestFile.write( cmakeTestText )	println "${testCpp} registered in ${projectName} test project"  }